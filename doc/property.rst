=========================
Property.js Documentation
=========================

.. contents::

Description
===========

The Property.js library exposes an interface for creating type validated
or constrained properties. Properties generated by this library are, themselves,
Modelo objects.

Usage Examples
==============

Property Interface
------------------

The Property library creates Modelo objects that expose a getter and setter
interface. While the purpose of the Property library is to add Property
validation, unvalidated properties may be created to make use of the
getter and setter interface::

    var Person, myPerson;

    Person = Modelo.define(function (options) {

        this.name = new Property();

    });

    myPerson = new Person();

    myPerson.name(); // undefined

    myPerson.name("Juan Pérez");
    myPerson.name(); // "Juan Pérez"

    myPerson.name(null);
    myPerson.name(); // null

Type Validation
---------------

Properties can be created that validate against a particular data type. All
available data types are documented below in the API specification.

::

    var Person, myPerson;

    Person = Modelo.define(function (options) {

        this.name = Property("string"); // new keyword optinoal
        this.name(options.name || "Juan Pérez");

    });

    myPerson = new Person();
    myPerson.name(); // "Juan Pérez"

    myPerson.name("John Smith");
    myPerson.name() // "John Smith"

    myPerson.name(123); // throws an Exception.

Type Constraints
----------------

Each data type comes with a set of pre-packaged constraints that can be added
to Property validation::

    var Person, myPerson;

    Person = Modelo.define(function (options) {

        this.name = Property("string", {nullable: false,
                                        max_length: 255,
                                        min_length: 1});

        this.name(options.name || "Juan Pérez");

    });

    myPerson = new Person();
    myPerson.name(); // "Juan Pérez"

    myPerson.name("John Smith");
    myPerson.name() // "John Smith"

    myPerson.name(123); // Throws an Error. Wrong type.
    myPerson.name(null); // Throws an Error. Cannot be null.
    myPerson.name(""); // Throws an Error. Too short.

Custom Constraints
------------------

Developers may pass in any number of custom validation functions. Validation
functions should return either a boolean indicator of successful validation.
A generic validation error will be thrown if this function returns false.

If a custom error message needs to be presented then the validation function
can return an object containing a `valid` and a `message` Property. The `valid`
Property is the boolean indicator of success and the `message` is the message to
use when throwing an error on failure.

var Person, myPerson;

    Person = Modelo.define(function (options) {

        this.name = Property("string",
                            {nullable: false,
                            max_length: 255,
                            min_length: 1},
                            function (value) {
                                return {
                                    valid: value === "Juan Pérez",
                                    message: "You're name must be Juan Pérez."
                                };
                            });

        this.name(options.name || "Juan Pérez");

    });

    myPerson = new Person();
    myPerson.name(); // "Juan Pérez"

    myPerson.name("John Smith"); // Throws an Error. Fails custom validation.
    myPerson.name(123); // Throws an Error. Wrong type.
    myPerson.name(null); // Throws an Error. Cannot be null.
    myPerson.name(""); // Throws an Error. Too short.

API Reference
=============

Exports
-------

The Property.js library exports multiple objects. The primary export is a
function that generates Property objects. Attached to this object are the
prepackaged validation functions. In Nod.js and AMD environments the library
can be required::

    var Property = require('Property');

    typeof Property === "function"; // true

    typeof Property.nullable === "function"; // true

In a browser environment, the Property library will be loaded in the global
`Modelo` object under `Modelo.Property`::

    typeof Modelo.Property === "function"; // true

Property([type, [validation, ...]])
----------------------------------------------

The Property function produces Property objects. It optionally accepts the
following parameters:

-   type

    A string representing the type to use for validation.

-   validation

    A function that accepts a value and return true or false to indicate
    whether the value is valid for the given Property. Any number of
    validation functions may be passed in.

type
^^^^

The type parameter of the `Property()` function is a string. If not given, the
default is `undefined`. Undefined properties simply represent a Property that
is not validated based on type. Currently supported types are:

-   undefined

-   string

-   number

-   boolean

validation
^^^^^^^^^^

Validation functions can be used to perform any validation beyond type. The
`Property` module has several validation functions built in including:

-   max_length(number)

-   min_length(number)

-   max_value(number)

-   min_value(number)

-   nullable(boolean)

Custom validation functions can either return a boolean
value to indicate valid, or not valid, or they can return object literals with
the following keys:

-   valid

    Boolean indicator of valid or not valid

-   message

    Message to be used in error when `valid` is false.

These prepackaged validation functions can be used in conjunction with custom
validation functions.

    this.name = Property("string",
                            Property.max_length(255),
                            function (value) {

                                return {

                                    valid: value === "Juan Pérez",
                                    message: "Name must be Juan Pérez."

                                };

                            })
