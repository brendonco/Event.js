=========
Modelo.js
=========

**An isomorphic JavaScript development tool set.**

*Status: In Development*

What Is Modelo?
===============

Modelo is toolkit for building cross platform compatible JavaScript libraries.

Developers who use Modelo gain access to three main categories of functionality:

    -   A framework for object definitions and inheritance.

    -   Cross platform support for asynchronous operations.

    -   A standardized API for interacting with persistent storage engines.

        *Note: Still a work in progress.*

Tell Me More
============

JavaScript Objects
------------------

The Modelo package contains three modules related to creating and working with
JavaScript objects: modelo.js, property.js, and relationship.js.

modelo.js
^^^^^^^^^

The modelo.js module is the base for all objects in the Modelo package. It
allows the creation and inheritance of multiple objects in an easy way::

    var Animal, Lion, Eagle, Griffin, myPet;

    Animal = Modelo.define();

    Lion = Animal.extend();
    Lion.prototype.roar = function () { console.log("Roar"); };

    Eagle = Animal.extend(function (options) {
        this.wingSpan = options.wingSpan || "2 Feet";
    })

    Griffin = Modelo.define(Lion, Eagle);

    myPet = new Griffin({wingSpan: "12 Feet"});

    myPet.roar(); // Console Output: "Roar"

    myPet.wingSpan; // "12 Feet"

    myPet.isInstance(Griffin); // true
    myPet.isInstance(Eagle); // true
    myPet.isInstance(Lion); // true
    myPet.isInstance(Animal); // true

For more detailed usage guides and API specifications, see the docs directory.

property.js
^^^^^^^^^^^

The property.js module provides a way to create type validated variables for
us in JavaScript objects::

    var Person, somePerson;

     Person = Modelo.define(function (options) {

        this.name = new Property("string", Property.nullable(false));

        this.name(options.name || "Juan Pérez");

    });

    somePerson = new Person();

    somPerson.name(); // "Juan Pérez"

    somePerson.name("John Smith");
    somePerson.name(); // "John Smith"

    somPerson.name(null); // Throws error due to Property.nullable(false).

    somePerson.name(1234); // Throws error due to incompatible type.

For more detailed usage guides and API specifications, see the docs directory.

relationship.js
^^^^^^^^^^^^^^^

The relationship.js module provides the same functionality as the property.js
module except that it deals with properties that hold related objects rather
than primitives::

    var Person, john, juan;

    Person = Modelo.define(function () {

        this.bestFriend = new Relationship("hasone", Person);

    });

    john = new Person();
    juan = new Person();

    john.bestFriend(juan);
    juan.bestFriend(john);

    john.bestFriend() === juan; // true
    juan.bestFriend() === john; // true

For more detailed usage guides and API specifications, see the docs directory.

Cross Platform Async
--------------------

A combination of the asynchronous programming pattern and nonblocking IO **is**
the concurrency model for JavaScript applications. The Modelo package simplifies
the process of writing cross platform compatible async libraries through three
modules: defer.js, event.js, and deferred.js.

defer.js
^^^^^^^^

The defer.js module exposes a single function called `defer`. This function
is an abstraction over platform specif methods for deferring the execution of
a function until the next cycle of the event loop. In Node.js this function
aliases process.nextTick. In modern browsers this function leverages
window.postMessage. In legacy browsers this function falls back on setTimeout.

::

    function logSomething() { console.log("ASYNC"); }

    defer(logSomething);

    // At some point later:
    // Console Output: "ASYNC"

For more detailed usage guides and API specifications, see the docs directory.

event.js
^^^^^^^^

The event.js module provides an object that can be mixed into other objects
generated by the modelo.js module. The event mixin adds, to any object, the
ability to have event callbacks registered and triggered in a way that leverages
the asynchronous nature of JavaScript::

    var Person = Modelo.define(Event),
        somePerson = new Person;

    somePerson.on("birthday", function () { console.log("Happy B-Day."); })

    somPerson.trigger("birthday");

    // At some point later:
    // Console Output: "Happy B-Day."

For more detailed usage guides and API specifications, see the docs directory.

deferred.js
^^^^^^^^^^^

The deferred.js module helps to simplify the process of writing and managing
your own asynchronous functions::

    // Wrap async operations in functions that return a deferred.
    function getRemoteData() {

        var deferred = new Deferred();

        // Note: jQuery is not required and only used here for demonstration.
        $.ajax({
            url: "myDataServer.com",
            success: function (data) {

                deferred.resolve(data);

            },
            error: function (jqxhr, status, err) {
                deferred.fail(err);
            }

        });

        return deferred.promise();

    }

    // Now multiple callbacks can be added without nesting.

    var resultPromise = getRemoteData();

    resultPromise.callback(function (value) {
        console.log(value);
    });

    resultPromise.errback(function (err) {
        console.log(err);
    });

    // At some point later:
    // Console Outputs the contents of either `value` or `err`

For more detailed usage guides and API specifications, see the docs directory.

Remaining Development Roadmap
=============================

-   Improve code comments

-   Finalize persistent storage API

-   Increase unit test coverage

-   Expand usage and API documentation

Setup Instructions
==================

This library is designed from the beginning to operate in as many JavaScript
environments as possible. To accomplish this, all modules have been wrapped in
a specialized module pattern that will detect the current environment and
choose the most appropriate loading mechanism.

Currently support platforms are Node.js, browser via <script>, and AMD via
RequireJS.

Node.js
-------

Node.js developers can `$ NPM install modelo` and `require()` away. The module
exported when running `require("modelo")` is the modelo.js module. All other
modules can be loaded as `require("modelo/<module>")`.

Browser (<script>)
------------------

Developers working with a normal browser environment can use regular script
tags to load modelo modules. Modelo.js loads into a single global `Modelo`
object. As with any JavaScript loading with <script> tags, the proper load
order must be used::

    // Modules with no dependencies
    <script src="modelo.js"></script>
    <script src="defer.js"></script>

    // Modules depending on modelo.js
    <script src="property.js"></script>
    <script src="relationship.js"></script>

    // Modules depending on modelo.js and defer.js
    <script src="event.js"></script>

    // Modules depending on modelo.js, defer.js, and event.js
    <script src="deferred.js"></script>

Browser (AMD)
-------------

Developers working with an AMD loader like RequireJS can add modelo.js modules
as though they are normal dependencies.

License
=======

Modelo
------

This project is released and distributed under an MIT License.

::

    Copyright (C) 2012 Kevin Conway

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

Mocha and Expect
----------------

Mocha and Expect are included with this repository for convenience. Both
libraries are distributed by their original authors under the MIT license.
Each library contains the full license text and original copyright notice.

Contributors
============

Style Guide
-----------

This library needs to be not only cross-platform compatible but also backwards
compatible as much as possible when it comes to browser environments. For this
reason, all code in this repository must validate with JSLint.

Testing
-------

Test coverage is essential to backing up the claim that this library is
compatible across all JavaScript environments. Unit tests are this repository's
guarantee that all components function as advertised in the environment. For
this reason, all code this repository must be tested using the chosen unit
testing library: Mocha.js. The chosen assertion library to use with Mocha
for this project is Expect.js. Mocha and Expect have been chosen for their
cross-platform compatibility.

For convenience and portability, both Mocha and Express are included in this
repository. For further convenience, browser based test runners have also been
included for both <script> and AMD loading.

Commit Messages
---------------

All commit messages in this repository should conform with the commit message
pattern detailed in
`this document <https://github.com/StandardsDriven/Repository>`_.

Contributor's Agreement
-----------------------

All contribution to this project are protected by the contributors agreement
detailed in the CONTRIBUTING file. All contributors should read the file before
contributing, but as a summary::

    You give us the rights to distribute your code and we promise to maintain
    an open source release of anything you contribute.
